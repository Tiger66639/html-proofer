{"name":"Html-proofer","tagline":"Test your rendered HTML files to make sure they're accurate.","body":"# HTML::Proofer\r\n[![Build Status](https://travis-ci.org/Tiger66639/html-proofer.svg)](https://travis-ci.org/Tiger66639/html-proofer)\r\nIf you generate HTML files, _then this tool might be for you_.\r\n\r\n`HTML::Proofer` is a set of tests to validate your HTML output. These tests check if your image references are legitimate, if they have alt tags, if your internal links are working, and so on. It's intended to be an all-in-one checker for your output.\r\n\r\n\r\n\r\n## Installation\r\n\r\nAdd this line to your application's Gemfile:\r\n\r\n    gem 'html-proofer'\r\n\r\nAnd then execute:\r\n\r\n    $ bundle\r\n\r\nOr install it yourself as:\r\n\r\n    $ gem install html-proofer\r\n\r\n**NOTE:** When installation speed matters, set `NOKOGIRI_USE_SYSTEM_LIBRARIES` to `true` in your environment. This is useful for increasing the speed of your Continuous Integration builds.\r\n\r\n## What's Tested?\r\n\r\nYou can enable or disable most of the following checks.\r\n\r\n### Images\r\n\r\n`img` elements:\r\n\r\n* Whether all your images have alt tags\r\n* Whether your internal image references are not broken\r\n* Whether external images are showing\r\n\r\n### Links\r\n\r\n`a`, `link` elements:\r\n\r\n* Whether your internal links are working\r\n* Whether your internal hash references (`#linkToMe`) are working\r\n* Whether external links are working\r\n\r\n### Scripts\r\n\r\n`script` elements:\r\n\r\n* Whether your internal script references are working\r\n* Whether external scripts are loading\r\n\r\n### Favicon\r\n\r\n* Whether your favicons are valid.\r\n\r\n### HTML\r\n\r\n* Whether your HTML markup is valid. This is done via [Nokogiri, to ensure well-formed markup](http://www.nokogiri.org/tutorials/ensuring_well_formed_markup.html).\r\n\r\n## Usage\r\n\r\n### Using in a script\r\n\r\nRequire the gem; generate some HTML; create a new instance of the `HTML::Proofer` on\r\nyour output folder; then `run` it. Here's a simple example:\r\n\r\n```ruby\r\nrequire 'html/proofer'\r\nrequire 'html/pipeline'\r\nrequire 'find'\r\n\r\n# make an out dir\r\nDir.mkdir(\"out\") unless File.exist?(\"out\")\r\n\r\npipeline = HTML::Pipeline.new [\r\n  HTML::Pipeline::MarkdownFilter,\r\n  HTML::Pipeline::TableOfContentsFilter\r\n], :gfm => true\r\n\r\n# iterate over files, and generate HTML from Markdown\r\nFind.find(\"./docs\") do |path|\r\n  if File.extname(path) == \".md\"\r\n    contents = File.read(path)\r\n    result = pipeline.call(contents)\r\n\r\n    File.open(\"out/#{path.split(\"/\").pop.sub('.md', '.html')}\", 'w') { |file| file.write(result[:output].to_s) }\r\n  end\r\nend\r\n\r\n# test your out dir!\r\nHTML::Proofer.new(\"./out\").run\r\n```\r\n\r\n### Using on the command-line\r\n\r\nYou'll get a new program called `htmlproof` with this gem. Terrific!\r\n\r\nUse it like you'd expect to:\r\n\r\n``` bash\r\nhtmlproof ./out --href-swap wow:cow,mow:doh --ext .html.erb --href-ignore www.github.com\r\n```\r\n\r\nNote: since `href_swap` is a bit special, you'll pass in a pair of `RegEx:String` values.\r\n`htmlproof` will figure out what you mean.\r\n\r\n### Using with Jekyll\r\n\r\nWant to use HTML Proofer with your Jekyll site? Awesome. Simply add `gem 'html-proofer'`\r\nto your `Gemfile` as described above, and add the following to your `Rakefile`,\r\nusing `rake test` to execute:\r\n\r\n```ruby\r\nrequire 'html/proofer'\r\n\r\ntask :test do\r\n  sh \"bundle exec jekyll build\"\r\n  HTML::Proofer.new(\"./_site\").run\r\nend\r\n```\r\n\r\nDon't have or want a `Rakefile`? You can also do something like the following:\r\n\r\n```bash\r\nhtmlproof ./_site\r\n```\r\n\r\n### Array of links\r\n\r\nInstead of a directory as the first argument, you can also pass in an array of links:\r\n\r\n``` ruby\r\nHTML::Proofer.new([\"http://github.com\", \"http://jekyllrb.com\"])\r\n```\r\n\r\nThis configures Proofer to just test those links to ensure they are valid. Note that for the command-line, you'll need to pass a special `--as-links` argument:\r\n\r\n``` bash\r\nhtmlproof www.google.com,www.github.com --as-links\r\n```\r\n\r\n## Ignoring content\r\n\r\nAdd the `data-proofer-ignore` attribute to any tag to ignore it from every check.\r\n\r\n``` html\r\n<a href=\"http://notareallink\" data-proofer-ignore>Not checked.</a>\r\n```\r\n\r\n## Configuration\r\n\r\nThe `HTML::Proofer` constructor takes an optional hash of additional options:\r\n\r\n| Option | Description | Default |\r\n| :----- | :---------- | :------ |\r\n| `alt_ignore` | An array of Strings or RegExps containing `img`s whose missing `alt` tags are safe to ignore. | `[]` |\r\n| `empty_alt_ignore` | If `true`, ignores images with empty alt tags. | `false` |\r\n| `check_external_hash` | Checks whether external hashes exist (even if the website exists). This slows the checker down. | `false` |\r\n| `check_favicon` | Enables the favicon checker. | `false` |\r\n| `check_html` | Enables HTML validation errors from Nokogiri | `false` |\r\n|`checks_to_ignore`| An array of Strings indicating which checks you'd like to not perform. | `[]`\r\n| `directory_index_file` | Sets the file to look for when a link refers to a directory. | `index.html` |\r\n| `disable_external` | If `true`, does not run the external link checker, which can take a lot of time. | `false` |\r\n| `error_sort` | Defines the sort order for error output. Can be `:path`, `:desc`, or `:status`. | `:path`\r\n| `ext` | The extension of your HTML files including the dot. | `.html`\r\n| `file_ignore` | An array of Strings or RegExps containing file paths that are safe to ignore. | `[]` |\r\n| `href_ignore` | An array of Strings or RegExps containing `href`s that are safe to ignore. Note that non-HTTP(S) URIs are always ignored. **Will be renamed in a future release.** | `[]` |\r\n| `href_swap` | A hash containing key-value pairs of `RegExp => String`. It transforms links that match `RegExp` into `String` via `gsub`. **Will be renamed in a future release.** | `{}` |\r\n| `ignore_script_embeds` | When `check_html` is enabled, `script` tags containing markup [are reported as errors](http://git.io/vOovv). Enabling this option ignores those errors. | `false`\r\n| `only_4xx` | Only reports errors for links that fall within the 4xx status code range. | `false` |\r\n| `url_ignore` | An array of Strings or RegExps containing URLs that are safe to ignore. It affects all HTML attributes. Note that non-HTTP(S) URIs are always ignored. | `[]` |\r\n| `verbose` | If `true`, outputs extra information as the checking happens. Useful for debugging. **Will be deprecated in a future release.**| `false` |\r\n| `verbosity` | Sets the logging level, as determined by [Yell](https://github.com/rudionrails/yell). | `:info`\r\n\r\n### Configuring Typhoeus and Hydra\r\n\r\n[Typhoeus](https://github.com/typhoeus/typhoeus) is used to make fast, parallel requests to external URLs. You can pass in any of Typhoeus' options for the external link checks with the options namespace of `:typhoeus`. For example:\r\n\r\n``` ruby\r\nHTML::Proofer.new(\"out/\", {:ext => \".htm\", :typhoeus => { :verbose => true, :ssl_verifyhost => 2 } })\r\n```\r\n\r\nThis sets `HTML::Proofer`'s extensions to use _.htm_, gives Typhoeus a configuration for it to be verbose, and use specific SSL settings. Check [the Typhoeus documentation](https://github.com/typhoeus/typhoeus#other-curl-options) for more information on what options it can receive.\r\n\r\nYou can similarly pass in a `:hydra` option with a hash configuration for Hydra.\r\n\r\nThe default value is `typhoeus => { :followlocation => true }`.\r\n\r\n### Configuring Parallel\r\n\r\n[Parallel](https://github.com/grosser/parallel) is used to speed internal file checks. You can pass in any of its options with the options namespace `:parallel`. For example:\r\n\r\n``` ruby\r\nHTML::Proofer.new(\"out/\", {:ext => \".htm\", :parallel => { :in_processes => 3} })\r\n```\r\n\r\nIn this example, `:in_processes => 3` is passed into Parallel as a configuration option.\r\n\r\n## Logging\r\n\r\nHTML-Proofer can be as noisy or as quiet as you'd like. There are two ways to log information:\r\n\r\n* If you set the `:verbose` option to `true`, HTML-Proofer will provide some debug information.\r\n* If you set the `:verbosity` option, you can better define the level of logging. See the configuration table above for more information.\r\n\r\n`:verbosity` is newer and offers better configuration. `:verbose` will be deprecated in a future 3.x.x release.\r\n\r\n## Custom tests\r\n\r\nWant to write your own test? Sure! Just create two classes--one that inherits from `HTML::Proofer::Checkable`, and another that inherits from `HTML::Proofer::CheckRunner`.\r\n\r\nThe `CheckRunner` subclass must define one method called `run`. This is called on your content, and is responsible for performing the validation on whatever elements you like. When you catch a broken issue, call `add_issue(message)` to explain the error.\r\n\r\nThe `Checkable` subclass defines various helper methods you can use as part of your test. Usually, you'll want to instantiate it within `run`. You have access to all of your element's attributes.\r\n\r\nHere's an example custom test that protects against `mailto` links that point to `octocat@github.com`:\r\n\r\n``` ruby\r\nclass OctocatLinkCheck < ::HTML::Proofer::Checkable\r\n  def mailto?\r\n    return false if @data_ignore_proofer || @href.nil? || @href.empty?\r\n    return @href.match /^mailto\\:/\r\n  end\r\n\r\n  def octocat?\r\n    return @href.match /\\:octocat@github.com\\Z/\r\n  end\r\n\r\nend\r\n\r\nclass MailToOctocat < ::HTML::Proofer::CheckRunner\r\n  def run\r\n    @html.css('a').each do |node|\r\n      link = OctocatLinkCheck.new(node, self)\r\n      line = node.line\r\n\r\n      if link.mailto? && link.octocat?\r\n        return add_issue(\"Don't email the Octocat directly!\", line)\r\n      end\r\n    end\r\n  end\r\nend\r\n```\r\n\r\n## Troubleshooting\r\n\r\n### Certificates\r\n\r\nTo ignore certificates, turn off Typhoeus' SSL verification:\r\n\r\n``` ruby\r\nHTML::Proofer.new(\"out/\", {\r\n  :typhoeus => {\r\n    :ssl_verifypeer => false,\r\n    :ssl_verifyhost => 0}\r\n}).run\r\n```\r\n\r\n### User-Agent\r\n\r\nTo change the User-Agent used by Typhoeus:\r\n\r\n``` ruby\r\nHTML::Proofer.new(\"out/\", {\r\n  :typhoeus => {\r\n    :headers => { \"User-Agent\" => \"Mozilla/5.0 (compatible; My New User-Agent)\" }\r\n}}).run\r\n```\r\n\r\n## Real-life examples\r\n\r\nProject | Repository\r\n:--- | :---\r\n[Raspberry Pi documentation](http://www.raspberrypi.org/documentation/) | [raspberrypi/documentation]( https://github.com/raspberrypi/documentation)\r\n[Open Whisper Systems website](https://whispersystems.org/) | [WhisperSystems/whispersystems.org](https://github.com/WhisperSystems/whispersystems.org)\r\n[Jekyll website](http://jekyllrb.com/) | [jekyll/jekyll](https://github.com/jekyll/jekyll)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}